class Logistic_Regression():
    
    def __init__(self,learning_rate,n_iters):
        self.learning_rate = learning_rate
        self.n_iters = n_iters
    
    def fit(self,x,y):
        self.x = x
        self.y = y 
        self.m, self.n = x.shape
        self.w = np.zeros(self.n)
        self.b = 0 
        
        for i in range(self.n_iters):
            self.update()
    
    def update(self):
        
        y_hat = 1 / (1 + np.exp(-(self.x.dot(self.w) + self.b)))      # sigmoid function
        
        dw = (1 / self.m) *np.dot(self.x.T, (y_hat - self.y))
        db = (1/ self.m) * np.sum(y_hat - self.y)
        
        self.w = self.w - self.learning_rate* dw
        self.b = self.b - self.learning_rate * db
                                  
    def predict(self,x):
                                  
        y_pred =  1 / (1 + np.exp(-(x.dot(self.w) + self.b)))
        y_pred = np.where(y_pred > 0.5, 1,0)
        return y_pred